#!/usr/bin/perl

use strict;
use IO::Socket::UNIX qw( SOCK_STREAM );

our $DEBUG = 0;

main();

sub main {
    checkDebugSwitch();

    my $socket = openSocket();
    authenticate($socket);
    my $config = fetchConfig($socket);
    my $rejectCount = fetchExitPolicyRejectCount($config);
    my $bandwidthRate = fetchRelayBandwidthRate($config);
    my $bandwidthBurst = fetchRelayBandwidthBurst($config);
    #my @results = fetchBandwidth($socket);
    my @results = fetchBandwidth2($socket);
    quit($socket);

    printf("OK - Read: %d Write: %d Reject-Count: %d|read=%d;0;0;%d;%d write=%d;0;0;%d;%d rejectCount=%d\n",
        $results[0],
        $results[1],
        $rejectCount,
        $results[0],
        $bandwidthRate,
        $bandwidthBurst,
        $results[1],
        $bandwidthRate,
        $bandwidthBurst,
        $rejectCount);

    exit(0);
}

sub openSocket {
    my $socket = IO::Socket::UNIX->new(
       Type => SOCK_STREAM,
       Peer => '/var/run/tor/control',
    ) or exitCritical("Can't connect to server: $!");

    writeLog('Opened socket');

    return $socket;
}

sub authenticate {
    my $socket = shift;

    my $result = talkToSocketAndReceiveOutput(
        $socket,
        "AUTHENTICATE"
    );

    if ( $result !~ /250 OK/ ) {
        exitCritical("Was not able to authenticate. Result: $result");
    }

    writeLog('Authenticated');
}

sub quit {
    my $socket = shift;

    talkToSocketAndReceiveOutput(
        $socket,
        "QUIT\n"
    );
}

sub talkToSocketAndReceiveOutput {
    my ($socket, $command) = @_;
    my $line;

    print $socket "$command\n";

    writeLog('Sent command ' . $command);

    $line = <$socket>;
    chomp($line);

    writeLog('Received line: '. $line);

    return $line;
}

sub fetchBandwidth {
    my $socket = shift;
    my $line;
    my $read = 0;
    my $write = 0;

    print $socket "SETEVENTS BW\n";
    writeLog('Startet listening for BW events');
    sleep(2);
    print $socket "SETEVENTS\n";
    writeLog('Stopped listening fro BW events');

    while ( $line = <$socket> ) {
        chomp($line);

        if ( $line =~ m/650 BW (\d+) (\d+)/ ) {
            $read = $1;
            $write = $2;
            last;
        }
    }

    if ( $read == 0 || $write == 0 ) {
        exitCritical("Didn't receive values. Read: $read Write: $write");
    }

    my @ret;
    $ret[0] = $read;
    $ret[1] = $write;

    return @ret;
}

sub fetchExitPolicyRejectCount {
    my $config = shift;
    my $rejectCount = 0;

    foreach my $line ( split("\n", $config) ) {
        chomp($line);

        if ( $line =~ /reject/ ) {
            writeLog('Found reject line');
            $rejectCount++;
        }
    }

    return $rejectCount;
}

sub fetchRelayBandwidthRate {
    my $config = shift;
    my $bandwidthRate = 0;

    foreach my $line ( split("\n", $config) ) {
        chomp($line);

        if ( $line =~ m/RelayBandwidthRate (\d+)/ ) {
            $bandwidthRate = $1;
            writeLog('Found bandwidth rate: ' . $bandwidthRate);
        }
    }

    return $bandwidthRate;
}

sub fetchRelayBandwidthBurst {
    my $config = shift;
    my $bandwidthBurst = 0;

    foreach my $line ( split("\n", $config) ) {
        chomp($line);

        if ( $line =~ m/RelayBandwidthBurst (\d+)/ ) {
            $bandwidthBurst = $1;
            writeLog('Found bandwidth burst: ' . $bandwidthBurst);
        }
    }

    return $bandwidthBurst;
}

sub fetchConfig {
    my $socket = shift;
    my $line;
    my $output;

    print $socket "GETINFO config-text\n";
    writeLog('Sent config fetch command');
    sleep(2);

    while ( $line = <$socket> ) {
        $output .= $line;

        last if ( $line =~ /250 OK/);
    }

    return $output;
}

sub fetchBandwidth2 {
    my $socket = shift;

    print $socket "GETINFO bw-event-cache\n";
    writeLog('Sent bw-event-cache fetch command');

    my $output = <$socket>;
    writeLog('Received output: ' . $output);

    my @bwCachePairs = split(' ', $output);
    writeLog(sprintf("Got %d bw-cache-entries", scalar(@bwCachePairs)));

    my $readBytesSum = 0;
    my $writeBytesSum = 0;
    my $counter = 0;

    for ( my $i = scalar(@bwCachePairs);
        ( $i >= scalar(@bwCachePairs) - 60 );
            $i--) {
        my $currentPair = $bwCachePairs[$i];

        my @splitted = split(',', $currentPair);
        $readBytesSum += $splitted[0];
        $writeBytesSum += $splitted[1];
    }

    writeLog(sprintf("Readsum: %d Writesum: %d", $readBytesSum, $writeBytesSum));

    my @ret;
    $ret[0] = $readBytesSum / 60;
    $ret[1] = $writeBytesSum / 60;

    return @ret;
}

sub exitCritical {
    printf("CRITICAL - %s\n", shift);
    exit 2;
}

sub writeLog {
    printf("Log: %s\n", shift) if ( $DEBUG );
}

sub checkDebugSwitch {
    if ( $ENV{'DEBUG'} ) {
        $DEBUG = $ENV{'DEBUG'};
    }
}
